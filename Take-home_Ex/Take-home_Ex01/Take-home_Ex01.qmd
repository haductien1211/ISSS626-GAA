---
title: "Take-home Exercise 1"
author: "Ha Duc Tien"
date: "August 24, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. Overview and Objective

Previous studies have demonstrated the significant potential of Spatial Point Patterns Analysis (SPPA) in exploring and identifying factors influencing road traffic accidents. However, these studies often focus solely on either behavioral or environmental factors, with limited consideration of temporal factors such as season, day of the week, or time of day.

-   In view of this, I am tasked to discover factors affecting road traffic accidents in the Bangkok Metropolitan Region BMR by employing both spatial spatio-temporal point patterns analysis methods.

The specific objectives of this take-home exercise are as follows:

-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.
-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.
-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.

# 2. Getting started

In this exercise, the below R packages will be used. They are:

-   [`sf`](https://r-spatial.github.io/sf/) for importing, managing, and processing geospatial data, and
-   [`tidyverse`](https://www.tidyverse.org/) for performing data science tasks such as importing, wrangling and visualising data.
-   [`spatstat`](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis.
-   [`raster`](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data
-   [`maptools`](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data.
-   [`tmap`](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.
-   [spNetwork](https://cran.r-project.org/web/packages/spNetwork/index.html), which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.

```{r}
pacman::p_load(raster, spatstat, tmap, tidyverse, sparr, maptools, spNetwork, sf)
```

# 3. The data

For the purpose of this exercise, three basic data sets must be used, they are:

-   [Thailand Road Accident (2019-2022)](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle

-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.

## Importing and wrangling the data

The below code would import the **Thailand Road Accident (2019-2022)**, make changes to the coordinates by filtering out the ones with empty or NA coordinates then filter out the region of study which is the Bangkok Metropolitan Region BMR and converting the projected coordinate system of data to WGS 84 / UTM zone 47N and the EPSG code is 32647. The operation would also create 2 new columns that has the Month and the Year of the date accidents occured. This step would create `accident_data_sf`

```{r}
accident_data_sf <- read_csv("data/nongeo/thai_road_accident_2019_2022.csv") %>%
  filter(!is.na(longitude) & longitude != "",
         !is.na(latitude) & latitude != "") %>%
  st_as_sf(coords = c("longitude", "latitude"), 
           crs = 4326) %>%
  filter(province_en %in% list("Bangkok", "Nonthaburi", 
                                           "Nakhon Pathom", "Pathum Thani", 
                                           "Samut Prakan", "Samut Sakhon")) %>%
  mutate(`incident_monthyear` = format(as.Date(`incident_datetime`), "%Y/%m")) %>%
  mutate(`incident_year` = format(as.Date(`incident_datetime`), "%Y")) %>%
  st_transform(crs = 32647)
```

```{r}
str(accident_data_sf)
```

This part is to import **Thailand Roads (OpenStreetMap Export)** and converting the projected coordinate system of data to WGS 84 / UTM zone 47N and the EPSG code is 32647 to create `THR_sf`

```{r}
THR_sf <- st_read(dsn = "data/geo", 
                         layer = "hotosm_tha_roads_lines_shp")
THR_sf <-  st_set_crs(THR_sf, 32647)
```
```{r}
THR_sf_lines <- st_cast(THR_sf, "LINESTRING")
```
```{r}
THR_sf_lines
```

This part is to import **Thailand - Subnational Administrative Boundaries** as well as filtering out the region of study which is the Bangkok Metropolitan Region BMR and converting the projected coordinate system of data to WGS 84 / UTM zone 47N and the EPSG code is 32647 to create `THSAB_sf`

```{r}
THSAB_sf <- st_read(dsn = "data/geo", 
                         layer = "tha_admbnda_adm2_rtsd_20220121") %>%
  filter(ADM1_EN %in% list("Bangkok", "Nonthaburi", "Nakhon Pathom",
                      "Pathum Thani", "Samut Prakan", "Samut Sakhon")) %>%
  st_transform(crs = 32647)

```

# 4. Analysis

## 4.1 Quick analysis

Now let's take a quick look at temporal distribution of accidents data. The idea of this is to identify whether there is any identifiable temporal patterns in the distribution of accidents.

To to this I will be plotting a bar chart showing the counts of accidents months on end from 2019 to 2022.


```{r fig.height=6, fig.width=24, dpi=100}
ggplot(accident_data_sf) +
  geom_bar(aes(x = incident_monthyear), 
                 bin = 100, 
                 color="black", 
                 fill="light blue") +
  xlab("Time")
```

:::callout-note

The above graph review that accident tends to peak around January April, July, October and December. Interestingly, these period seems to coincide with holidays seasons in Thailand.

:::

```{r fig.height=6, fig.width=12, dpi=100}
ggplot(accident_data_sf) +
  geom_bar(aes(x = province_en),
                 color="black", 
                 fill="light blue") +
  xlab("Province")
```

```{r fig.height=9, fig.width=12, dpi=100}
tm_shape(THSAB_sf) +
  tm_polygons() +
tm_shape(accident_data_sf) +
  tm_dots() +
tm_facets(by = "weather_condition",
          free.coords = FALSE,
          free.scales = FALSE,
          drop.units = TRUE)
#   tm_dots()
```



```{r fig.height=9, fig.width=12, dpi=100}
tm_shape(THSAB_sf) +
  tm_polygons() +
tm_shape(accident_data_sf) +
  tm_dots() 
# tm_shape(THR_sf) +
#   tm_lines()
```


## Kernel Density Estimation
```{r}
accident_data <- as_Spatial(accident_data_sf)
THSAB <- as_Spatial(THSAB_sf)
```

```{r}
accident_data_sp <- as(accident_data, "SpatialPoints")
THSAB_sp <- as(THSAB, "SpatialPolygons")
```

```{r}
accident_data_ppp <- as.ppp(accident_data_sf)
any(duplicated(accident_data_ppp))
```

```{r}
plot(accident_data_ppp)
```
```{r}
THSAB_owin <- as.owin(THSAB_sf)
```


```{r}
plot(THSAB_owin)
```

```{r}
accident_data_owin_ppp <- accident_data_ppp[THSAB_owin]
accident_data_owin_ppp.km <- rescale.ppp(accident_data_owin_ppp, 1000, "km")
```


```{r fig.height=9, fig.width=12, dpi=100}
kde_accident_data_bw <- density(accident_data_owin_ppp.km,
                              sigma=bw.diggle,
                              edge=TRUE,
                              kernel="quartic") 
plot(kde_accident_data_bw, main = "Fixed bandwidth")
```


```{r fig.height=9, fig.width=12, dpi=100}
kde_accident_data_adaptive <- adaptive.density(accident_data_owin_ppp.km, method="kernel")
plot(kde_accident_data_adaptive)
```

```{r}
# BKroad <- st_intersects(THSAB_sf, accident_data_sf)
```


```{r}
# lixels <- lixelize_lines(THR_sf_lines, 
#                          lx_length = 5000, 
#                          mindist = 2000)

```

```{r}
# samples <- lines_center(lixels)
```



```{r}
# densities <- nkde(THR_sf_lines, 
#                   events = accident_data_sf,
#                   w = rep(1, nrow(accident_data_sf)),
#                   samples = samples,
#                   kernel_name = "quartic",
#                   bw = 300, 
#                   div= "bw", 
#                   method = "continuous", 
#                   digits = 1, 
#                   tol = 1,
#                   grid_shape = c(1,1), 
#                   max_depth = 15,
#                   agg = NULL,
#                   sparse = TRUE,
#                   verbose = FALSE)
```