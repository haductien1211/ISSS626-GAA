{
  "hash": "2d91ef569a7be349bfb43b86411ca56d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 10\"\nauthor: \"Ha Duc Tien\"\ndate: \"October 21, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  message: false\n  freeze: true\n---\n\n\n# 1. Getting started\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, tmap, httr, performance)\n```\n:::\n\n\n# 2. Importing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile_list <- list.files(path = \"data/aspatial\",\n                        pattern = \"^ResidentialTransaction.*\\\\.csv$\",\n                        full.names = TRUE)\n\nrealis_data <- file_list %>%\n  map_dfr(read_csv)\n```\n:::\n\n\n# 3. Data wrangling\n\nThe code chunk below does the following\n\n-   converting values in Sale Date field from character to numerical date format\n-   extracting resale and condominium transaction records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale <- realis_data %>%\n  mutate(`Sale Date` = dmy(`Sale Date`)) %>%\n  filter(`Type of Sale` == \"Resale\" &\n           `Property Type` == \"Condominium\")\n```\n:::\n\n\nPreparing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npostcode <- unique(condo_resale$`Postal Code`)\n```\n:::\n\n\n\nGeocoding\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://onemap.gov.sg/api/common/elastic/search\"\nfound <- data.frame()\nnot_found <- data.frame()\n\nfor (postcode in postcode){\n  query <- list('searchVal'=postcode, 'returnGeom'='Y', \n                'getAddrDetails'='Y', 'pageNum'='1')\n  res <- GET(url, query=query)\n  if ((content(res)$found)!=0){\n    found <- rbind(found, data.frame(content(res))[4:13])\n  } else {not_found = data.frame(postcode)\n  }\n}\n```\n:::\n\n\nTidying field names\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfound <- found %>%\n  select(c(6:8)) %>%\n  rename(POSTAL = `results.POSTAL`,\n         XCOORD = `results.X`,\n         YCOORD = `results.Y`)\n```\n:::\n\n\nWrite a code chunk to join condo_resale and found. Name the output condo_resale_geocoded.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_geocoded = left_join(\n  condo_resale, found, \n  by = c('Postal Code' = 'POSTAL'))\n```\n:::\n\n\nWrite a code chunk to convert condo_resale_geocoded from tibble data frame to sf point feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- st_as_sf(condo_resale_geocoded, \n                            coords = c(\"XCOORD\",\n                                       \"YCOORD\"),\n                            crs=3414)\n```\n:::\n\n\nThe code chunk below is used to check if there are overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- condo_resale_sf %>%\n  mutate(overlap = lengths(st_equals(., .)) > 1)\n```\n:::\n\n\nIn the code code chunk below, st_jitter() of sf package is used to move the point features by 5m to avoid overlapping point features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- condo_resale_sf %>%\n  st_jitter(amount = 2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(condo_resale_sf, \"data/rds/condo_resale_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncondo_resale_sf <- read_rds(\"data/rds/condo_resale_sf.rds\")\n\ncondo_resale_sf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6005 features and 21 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14973.18 ymin: 24728.7 xmax: 43285.94 ymax: 48671.85\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6,005 × 22\n   `Project Name`      `Transacted Price ($)` `Area (SQFT)` `Unit Price ($ PSF)`\n * <chr>                                <dbl>         <dbl>                <dbl>\n 1 CASA ROSA                          1500000         1367.                 1097\n 2 THE MINTON                         1840000         1216.                 1513\n 3 NV RESIDENCES                      1350000         1109.                 1218\n 4 SANT RITZ                           890000          527.                 1687\n 5 ECO                                1620000          990.                 1636\n 6 MARINA BAY RESIDEN…                1420000          710.                 1999\n 7 THE GARDENS AT BIS…                1800000         1206.                 1493\n 8 THOMSON 800                        2800000         1625.                 1723\n 9 SELETAR PARK RESID…                1490000         1507.                  989\n10 THE ESTUARY                        1540000         1195.                 1289\n# ℹ 5,995 more rows\n# ℹ 18 more variables: `Sale Date` <date>, Address <chr>, `Type of Sale` <chr>,\n#   `Type of Area` <chr>, `Area (SQM)` <dbl>, `Unit Price ($ PSM)` <dbl>,\n#   `Nett Price($)` <chr>, `Property Type` <chr>, `Number of Units` <dbl>,\n#   Tenure <chr>, `Completion Date` <chr>, `Purchaser Address Indicator` <chr>,\n#   `Postal Code` <chr>, `Postal District` <chr>, `Postal Sector` <chr>,\n#   `Planning Region` <chr>, `Planning Area` <chr>, geometry <POINT [m]>\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}