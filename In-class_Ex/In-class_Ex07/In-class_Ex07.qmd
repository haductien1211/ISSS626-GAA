---
title: "In-class Exercise 7"
author: "Ha Duc Tien"
date: "October 14, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  message: false
  freeze: true
---

# 1. Getting started

Installing and loading packages
```{r}
pacman::p_load(olsrr, ggstatsplot, ggpubr, 
               sf, spdep, GWmodel, tmap,
               tidyverse, gtsummary, performance,
               see, sfdep)
```

# 2. The data

```{r}
mpsz = st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```
### URA Master Plan 2014 planning subzone boundary

```{r}
condo_resale = read_csv("data/aspatial/Condo_resale_2015.csv")
```

```{r}
condo_resale.sf <- st_as_sf(condo_resale,
                            coords = c("LONGITUDE", "LATITUDE"),
                            crs=4326) %>%
  st_transform(crs=3414)
```

# 3. Model Assessment: olsrr method


### Correlation Analysis - ggstatsplot methods

Instead of using corrplot package, in the code chunk below, `ggcorrmat()` of `ggstatsplot` is used.

```{r, fig.width= 12, fig.height=10, dpi=100}
ggcorrmat(condo_resale[, 5:23])
```

### Building a Hedonic Pricing Model by using Multiple Linear Regression Method


The code chunk below using `lm()` to calibrate the multiple linear regression model.


```{r}
condo_mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM +
                  AGE + PROX_CBD + PROX_CHILDCARE +
                  PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA +
                  PROX_HAWKER_MARKET + PROX_KINDERGARTEN +
                  PROX_MRT + PROX_PARK + PROX_PRIMARY_SCH +
                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL +
                  PROX_SUPERMARKET + PROX_BUS_STOP +
                  NO_Of_UNITS + FAMILY_FRIENDLY +
                  FREEHOLD + LEASEHOLD_99YR,
                data = condo_resale.sf)

summary(condo_mlr)
```

In this section, we would like to introduce you a fantastic R package specially programmed for performing OLS regression. It is called [olsrr](https://olsrr.rsquaredacademy.com/). It provides a collection of very useful methods for building better multiple linear regression models:

-   comprehensive regression output
-   residual diagnostics
-   measures of influence
-   heteroskedasticity tests
-   model fit assessment
-   variable contribution assessment
-   variable selection procedures

## 3.1 Generating tidy linear regression report


```{r}
ols_regress(condo_mlr)
```

p-value <0.05 from ANOVA results model is significant and Adj. R-Squared = 0.647

## 3.2 MultiCollinearity diagnostics

```{r}
ols_vif_tol(condo_mlr)
```

:::callout-tip

None of the VIF results are > 5 so none of the variable are correlated (1-5 no worries, 5-10 be concerned, >10 no go). Hence no variable elimination needed

:::

## 3.3 Variable selection

For both Forward and Backward Stepwise once the variables are thrown out, they could not be added back in


### Forward Stepwise regression

`ols_step_forward_p()` use p-value as criteria for variable selection

```{r}
condo_fw_mlr <- ols_step_forward_p(condo_mlr,
                                   p_val = 0.05,
                                   details = FALSE)
```

```{r, fig.width= 18, fig.height=14, dpi=100}
plot(condo_fw_mlr)
```

## 3.4 Visualising model parameters

```{r, fig.width= 18, fig.height=10, dpi=100}
ggcoefstats(condo_mlr,
            sort = "ascending")
```

## 3.5 Test for non-linearity

### Fit plot

```{r, fig.width= 9, fig.height=7, dpi=100}
ols_plot_resid_fit(condo_fw_mlr$model)
```

### Histogram plot

```{r, fig.width= 9, fig.height=7, dpi=100}
ols_plot_resid_hist(condo_fw_mlr$model)
```

### Test for normality

```{r}
ols_test_normality(condo_fw_mlr$model)
```

## 3.6 Test for Spatial Autocorrelation

First Export the residual and save as data frame

```{r}
mlr_output <- as.data.frame(condo_fw_mlr$model$residuals) %>%
  rename(`FW_MLR_RES` = `condo_fw_mlr$model$residuals`)
```

Second join the residual with the `condo_resale.sf` object

```{r}
condo_resale.sf <- cbind(condo_resale.sf,
                         mlr_output$FW_MLR_RES) %>%
  rename(`MLR_RES` = `mlr_output.FW_MLR_RES`)
```

Third use `tmap` package to display the distribution of the residuals on an interactive map

```{r}
tmap_mode("view")

tm_shape(mpsz)+
  tmap_options(check.and.fix = TRUE)+
  tm_polygons(alpha = 0.4) +
  tm_shape(condo_resale.sf) +
  tm_dots("MLR_RES",
          alpha = 0.6,
          style = "quantile")

tmap_mode("plot")
```

## 3.6 Spatial stationary test/ Global Moran's I test

To proof that our observation is indeed true, the Moran’s I test will be performed

Ho: The residuals are randomly distributed (also known as spatial stationary) H1: The residuals are spatially non-stationary

First, we will compute the distance-based weight matrix by using `dnearneigh()` function of spdep.

```{r}
condo_resale.sf <- condo_resale.sf %>%
  mutate(nb = st_knn(geometry,
                     k = 6,
                     longlat = FALSE),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1)
```

Next, `global_moran_perm()` of sfdep is used to perform global Moran permutation test.



```{r}
global_moran_perm(condo_resale.sf$MLR_RES,
                  condo_resale.sf$nb,
                  condo_resale.sf$wt,
                  alternative = "two.sided",
                  nsim = 99)
```

:::callout-tip

p-value < 0.05 null hypothesis is rejected that the residuals are randomly distributed. Since Global Moran I = 0.32254 > 0 we can infer that the residuals resmble cluster distribution

:::


# 4.Building Hedonic Pricing Models using GWmodel


In this section, you are going to learn how to modelling hedonic pricing by using geographically weighted regression model. Two spatial weights will be used, they are: fixed and adaptive bandwidth schemes.


## 4.1 Building Fixed Bandwidth GWR Model

### Computing fixed bandwith

In the code chunk below `bw.gwr()` of GWModel package is used to determine the optimal fixed bandwidth to use in the model. Notice that the argument adaptive is set to FALSE indicates that we are interested to compute the fixed bandwidth.

There are two possible approaches can be uused to determine the stopping rule, they are: CV cross-validation approach and AIC corrected (AICc) approach. We define the stopping rule using approach agreement.

```{r}
bw_fixed <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD + 
                     PROX_CHILDCARE + PROX_ELDERLYCARE  + PROX_URA_GROWTH_AREA + 
                     PROX_MRT   + PROX_PARK + PROX_PRIMARY_SCH + 
                     PROX_SHOPPING_MALL + PROX_BUS_STOP + NO_Of_UNITS + 
                     FAMILY_FRIENDLY + FREEHOLD, 
                   data=condo_resale.sf, 
                   approach="CV", 
                   kernel="gaussian", 
                   adaptive=FALSE, 
                   longlat=FALSE)
```

The results shows that the recommended bandwidth is 971.3405 meters

### GWModel method - fixed bandwith

Now we can use the code chunk below to calibrate the gwr model using fixed bandwidth and gaussian kernel.

```{r}
gwr_fixed <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + PROX_CBD +
                         PROX_CHILDCARE + PROX_ELDERLYCARE  + 
                         PROX_URA_GROWTH_AREA + PROX_MRT   + 
                         PROX_PARK + PROX_PRIMARY_SCH + 
                         PROX_SHOPPING_MALL + PROX_BUS_STOP + 
                         NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                   data=condo_resale.sf, 
                   bw = bw_fixed, 
                   kernel="gaussian", 
                   longlat=FALSE)
```

The output is saved in a list of class “gwrm”. The code below can be used to display the model output.

```{r}
gwr_fixed
```

:::callout-tip

Adjusted R-square value:  0.8430417, by calibrating the model, the explanatory power increased significantly.

The report shows that the AICc of the gwr is 42263.61 which is significantly smaller than the globel multiple linear regression model of 42967.1.

:::

## 4.2 Building Adaptive Bandwidth GWR Model

In this section, we will calibrate the gwr-based hedonic pricing model by using adaptive bandwidth approach.

### Computing the adaptive bandwidth

Similar to the earlier section, we will first use `bw.gwr()` to determine the recommended data point to use.

The code chunk used look very similar to the one used to compute the fixed bandwidth except the adaptive argument has changed to TRUE.

```{r}
bw_adaptive <- bw.gwr(formula = SELLING_PRICE ~ AREA_SQM + AGE  + 
                        PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE    + 
                        PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + 
                        PROX_PRIMARY_SCH + PROX_SHOPPING_MALL   + PROX_BUS_STOP + 
                        NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                      data=condo_resale.sf, 
                      approach="CV", 
                      kernel="gaussian", 
                      adaptive=TRUE, 
                      longlat=FALSE)
```

The result shows that the 30 is the recommended data points to be used.

### Constructing the adaptive bandwidth gwr model

Now, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and gaussian kernel as shown in the code chunk below.

```{r}
gwr_adaptive <- gwr.basic(formula = SELLING_PRICE ~ AREA_SQM + AGE + 
                            PROX_CBD + PROX_CHILDCARE + PROX_ELDERLYCARE + 
                            PROX_URA_GROWTH_AREA + PROX_MRT + PROX_PARK + 
                            PROX_PRIMARY_SCH + PROX_SHOPPING_MALL + PROX_BUS_STOP + 
                            NO_Of_UNITS + FAMILY_FRIENDLY + FREEHOLD, 
                          data=condo_resale.sf, 
                          bw=bw_adaptive, 
                          kernel = 'gaussian', 
                          adaptive=TRUE, 
                          longlat = FALSE)
```

The code below can be used to display the model output.

```{r}
gwr_adaptive
```

:::callout-tip

The report shows that the AICc the adaptive distance gwr is 41982.22 which is even smaller than the AICc of the fixed distance gwr of 42263.61.

:::

## 4.3 Visualising GWR Output

In addition to regression residuals, the output feature class table includes fields for observed and predicted y values, condition number (cond), Local R2, residuals, and explanatory variable coefficients and standard errors:

-   Condition Number: this diagnostic evaluates local collinearity. In the presence of strong local collinearity, results become unstable. Results associated with condition numbers larger than 30, may be unreliable.

-   Local R2: these values range between 0.0 and 1.0 and indicate how well the local regression model fits observed y values. Very low values indicate the local model is performing poorly. Mapping the Local R2 values to see where GWR predicts well and where it predicts poorly may provide clues about important variables that may be missing from the regression model.

-   Predicted: these are the estimated (or fitted) y values 3. computed by GWR.

-   Residuals: to obtain the residual values, the fitted y values are subtracted from the observed y values. Standardized residuals have a mean of zero and a standard deviation of 1. A cold-to-hot rendered map of standardized residuals can be produce by using these values.

-   Coefficient Standard Error: these values measure the reliability of each coefficient estimate. Confidence in those estimates are higher when standard errors are small in relation to the actual coefficient values. Large standard errors may indicate problems with local collinearity.

They are all stored in a SpatialPointsDataFrame or SpatialPolygonsDataFrame object integrated with fit.points, GWR coefficient estimates, y value, predicted values, coefficient standard errors and t-values in its “data” slot in an object called SDF of the output list.

### Converting SDF into sf data.frame

```{r}
gwr_fixed_output <- as.data.frame(gwr_fixed$SDF) %>%
  select(-c(2:15))
```

```{r}
gwr_adaptive_output <- as.data.frame(
  gwr_adaptive$SDF) %>%
  select(-c(2:15))
```

```{r}
gwr_sf_fixed<- cbind(condo_resale.sf,
         gwr_fixed_output)
```

```{r}
gwr_sf_adaptive <- cbind(condo_resale.sf,
                         gwr_adaptive_output)
```

Next, glimpse() is used to display the content of condo_resale.sf.adaptive sf data frame.


```{r}
glimpse(gwr_sf_fixed)
```

```{r}
glimpse(gwr_sf_adaptive)
```

```{r}
summary(gwr_adaptive$SDF$yhat)
```

### Visualising local R2

The code chunks below is used to create an interactive point symbol map.

```{r}
tmap_mode("view")
tmap_options(check.and.fix = TRUE)
tm_shape(mpsz)+
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf_adaptive) +  
  tm_dots(col = "Local_R2",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))

tmap_mode("plot")
```

```{r}
tmap_mode("view")

tm_shape(mpsz)+
  tmap_options(check.and.fix = TRUE)+
  tm_polygons(alpha = 0.4) +
  tm_shape(gwr_sf_fixed) +
  tm_dots("Local_R2",
          alpha = 0.6,
          style = "quantile")

tmap_mode("plot")
```

### Visualising coefficient estimates

The code chunks below is used to create an interactive point symbol map.

```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
AREA_SQM_SE <- tm_shape(mpsz)+
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf_fixed) +  
  tm_dots(col = "AREA_SQM_SE",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))

AREA_SQM_TV <- tm_shape(mpsz)+
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf_fixed) +  
  tm_dots(col = "AREA_SQM_TV",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))

tmap_arrange(AREA_SQM_SE, AREA_SQM_TV, 
             asp=1, ncol=2,
             sync = TRUE)
```



```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
AREA_SQM_SE <- tm_shape(mpsz)+
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf_adaptive) +  
  tm_dots(col = "AREA_SQM_SE",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))

AREA_SQM_TV <- tm_shape(mpsz)+
  tm_polygons(alpha = 0.1) +
tm_shape(gwr_sf_adaptive) +  
  tm_dots(col = "AREA_SQM_TV",
          border.col = "gray60",
          border.lwd = 1) +
  tm_view(set.zoom.limits = c(11,14))

tmap_arrange(AREA_SQM_SE, AREA_SQM_TV, 
             asp=1, ncol=2,
             sync = TRUE)
```

### By URA Plannign Region

```{r}
tm_shape(mpsz[mpsz$REGION_N=="CENTRAL REGION", ])+
  tm_polygons()+
tm_shape(gwr_sf_fixed) + 
  tm_bubbles(col = "Local_R2",
           size = 0.15,
           border.col = "gray60",
           border.lwd = 1)
```

### By URA Plannign Region

```{r}
tm_shape(mpsz[mpsz$REGION_N=="CENTRAL REGION", ])+
  tm_polygons()+
tm_shape(gwr_sf_adaptive) + 
  tm_bubbles(col = "Local_R2",
           size = 0.15,
           border.col = "gray60",
           border.lwd = 1)
```