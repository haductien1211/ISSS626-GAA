---
title: "Hands-on Exercise 2.2 Second Order Spatial Point Patterns Analysis Methods"
author: "Ha Duc Tien"
date: "August 26, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. Overview

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:

-   events such as crime, traffic accident and disease onset, or
-   business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

Using appropriate functions of [`spatstat`](https://cran.r-project.org/web/packages/spatstat/), this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.

The specific questions we would like to answer are as follows:

-   are the childcare centres in Singapore randomly distributed throughout the country?
-   if the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?

# 2. The data

To provide answers to the questions above, three data sets will be used. They are:

-   `CHILDCARE`, a point feature data providing both location and attribute information of childcare centres. It was downloaded from [Data.gov.sg](https://data.gov.sg/) and is in geojson format.
-   `MP14_SUBZONE_WEB_PL`, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from [Data.gov.sg](https://data.gov.sg/).
-   `CostalOutline`, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format.

# 3. Installing and Loading the R packages

In this hands-on exercise, five R packages will be used, they are:

-   [`sf`](https://r-spatial.github.io/sf/), a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.
-   [`spatstat`](https://spatstat.org/), which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.
-   [`raster`](https://cran.r-project.org/web/packages/raster/) which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.
-   [`maptools`](https://cran.r-project.org/web/packages/maptools/index.html) which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.
-   [`tmap`](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.

Use the code chunk below to install and launch the five R packages.

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse, maptools)
```

# 4. Spatial Data Wrangling

## 4.1 Importing the spatial data

In this section, [st_read()](https://r-spatial.github.io/sf/reference/st_read.html) of sf package will be used to import these three geospatial data sets into R.

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer="CostalOutline")
```

```{r}
mpsz_sf <- st_read(dsn = "data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

**DIY: Using the appropriate sf function we learned in Hands-on Exercise 2, retrieve the referencing system information of these geospatial data.**

```{r}
st_crs(childcare_sf)
```

```{r}
st_crs(sg_sf)
```

```{r}
st_crs(mpsz_sf)
```

**DIY: Using the method we learned in Lesson 2, assign the correct crs to mpsz_sf and sg_sf simple feature data frames.**

**DIY: If necessary, changing the referencing system to Singapore national projected coordinate system.**

```{r}
sg_sf  <- st_transform(sg_sf, crs = 3414)
mpsz_sf  <- st_transform(mpsz_sf, crs = 3414)
```

## 4.2 Mapping the geospatial data sets

After checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.

**DIY: Using the mapping methods we learned in Hands-on Exercise 3, prepare a map as shown below.**

```{r, fig.width = 15, fig.height = 9, dpi = 100}
tmap_mode('plot')

tm_shape(mpsz_sf) +
  tm_polygons() +
  tm_shape(childcare_sf) +
  tm_dots(size = 0.3)
```

Notice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.

Alternatively, we can also prepare a pin map by using the code chunk below.

```{r}
tmap_mode('view')
tm_shape(childcare_sf) +
  tm_dots()
```

```{r}
tmap_mode('plot')
```

Notice that at the interactive mode, `tmap` is using [leaflet for R API](https://rstudio.github.io/leaflet/). The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, we can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: `ESRI.WorldGrayCanvas`, `OpenStreetMap`, and `ESRI.WorldTopoMap`. The default is `ESRI.WorldGrayCanvas`.

::: callout-tip
## Reminder

Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. We should also avoid displaying eccessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify.
:::

# 5. Geospatial Data wrangling

Although simple feature data frame is gaining popularity again sp’s Spatial* classes, there are, however, many geospatial analysis packages require the input geospatial data in sp’s Spatial* classes. In this section, we will learn how to convert simple feature data frame to sp’s Spatial* class.

## 5.1 Converting sf data frames to sp’s Spatial* class

The code chunk below uses `as_Spatial()` of `sf` package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```


**DIY: Using appropriate function, display the information of these three Spatial classes as shown below.**

```{r}
childcare
```
```{r}
mpsz
```

```{r}
sg
```

```{r}
summary(childcare)
summary(mpsz)
summary(sg)
```

## 5.2 Converting the Spatial* class into generic sp format

spatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial classes into ppp object. We need to convert the Spatial classes into Spatial object first.

The codes chunk below converts the Spatial* classes into generic sp objects.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

Next, we should display the sp objects properties as shown below.

```{r}
childcare_sp
```

```{r}
sg_sp
```

**Challenge: Do we know what are the differences between Spatial classes and generic sp object?**


The generic sp object, which is a Spatial object, does not inherently include a data frame of attributes. It seems to only include spatial coordinates and CRS information.

Spatial classes include a data frame with attributes associated with each spatial feature

## 5.3 Converting the generic sp format into spatstat’s ppp format

Now, we will use `as.ppp()` function of `spatstat` to convert the spatial data into `spatstat`’s ppp object format.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

Now, let us plot childcare_ppp and examine the different.

```{r, fig.width = 15, fig.height = 9, dpi = 100}
plot(childcare_ppp)
```

We can take a quick look at the summary statistics of the newly created ppp object by using the code chunk below.


```{r}
summary(childcare_ppp)
```

Notice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.

## 5.4 Handling duplicated points

We can check the duplication in a ppp object by using the code chunk below.

```{r}
any(duplicated(childcare_ppp))
```

To count the number of co-incidence point, we will use the `multiplicity()` function as shown in the code chunk below.

```{r}
multiplicity(childcare_ppp)
```

If we want to know how many locations have more than one point event, we can use the code chunk below.

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

The output shows that there are 0 duplicated point events.

To view the locations of these duplicate point events, we will plot *childcare* data by using the code chunk below.

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

There are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.

The second solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

The third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then we would need analytical techniques that take into account these marks.

The code chunk below implements the jittering approach.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

**DIY: Using the method we learned in previous section, check if any dusplicated point in this geospatial data.**

```{r}
any(duplicated(childcare_ppp_jit))
```

## 5.5 Creating owin object

When analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.

The code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.

```{r}
sg_owin <- as.owin(sg_sf)
```

The ouput object can be displayed by using plot() function


```{r, fig.width = 15, fig.height = 9, dpi = 100}
plot(sg_owin)
```


and summary() function of Base R.

```{r}
summary(sg_owin)
```

## 5.6 Combining point events object and owin object

In this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output object combined both the point and polygon feature in one ppp object class as shown below.

```{r}
summary(childcareSG_ppp)
```


**DIY: Using the method we learned in previous exercise, plot the newly derived childcareSG_ppp as shown below.**

```{r, fig.width = 15, fig.height = 9, dpi = 100}
plot(childcareSG_ppp)
```

### 5.6.1 Extracting study area

The code chunk below will be used to extract the target planning areas.

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

Plotting target planning areas

```{r, fig.width = 24, fig.height = 18, dpi = 100}
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

```{r, fig.width = 24, fig.height = 18, dpi = 100}
plot(tm, main = "Tampines")
```

```{r, fig.width = 24, fig.height = 18, dpi = 100}
plot(ck, main = "Choa Chu Kang")
```

```{r, fig.width = 24, fig.height = 18, dpi = 100}
plot(jw, main = "Jurong West")
```


### 5.6.2 Creating owin object

Now, we will convert these sf objects into owin objects that is required by spatstat.

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

### 5.6.3 Combining childcare points and the study area

By using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

Next, `rescale.ppp()` function is used to trasnform the unit of measurement from metre to kilometre.

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

The code chunk below is used to plot these four study areas and the locations of the childcare centres.

```{r, fig.width = 24, fig.height = 18, dpi = 100}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

# 6. Second-order Spatial Point Patterns Analysis

# 7. Analysing Spatial Point Process Using G-Function

The G function measures the distribution of the distances from an arbitrary event to its nearest event. In this section, we will learn how to compute G-function estimation by using `Gest()` of `spatstat` package. We will also learn how to perform monta carlo simulation test using `envelope()` of `spatstat` package.

## 7.1 Choa Chu Kang planning area

### 7.1.1 Computing G-function estimation

The code chunk below is used to compute G-function using `Gest()` of `spatat` package.

```{r, fig.width = 12, fig.height = 9, dpi = 100}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

### 7.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-fucntion

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```


```{r, fig.width = 12, fig.height = 9, dpi = 100}
plot(G_CK.csr)
```

## 7.2 Tampines planning area

### 7.2.1 Computing G-function estimation

```{r, fig.width = 12, fig.height = 9, dpi = 100}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

### 7.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r, fig.width = 12, fig.height = 9, dpi = 100}
plot(G_tm.csr)
```

# 8. Analysing Spatial Point Process Using F-Function

The F function estimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. In this section, we will learn how to compute F-function estimation by using `Fest()` of `spatstat` package. We will also learn how to perform monta carlo simulation test using `envelope()` of `spatstat` package.

## 8.1 Choa Chu Kang planning area

### 8.1.1 Computing F-function estimation

The code chunk below is used to compute F-function using Fest() of spatat package.

```{r, fig.width = 12, fig.height = 9, dpi = 100}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```


### 8.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-fucntion

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r, fig.width = 12, fig.height = 9, dpi = 100}
plot(F_CK.csr)
```

## 8.2 Tampines planning area

### 8.2.1 Computing F-function estimation

Monte Carlo test with F-fucntion

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

### 8.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r, fig.width = 12, fig.height = 9, dpi = 100}
plot(F_tm.csr)
```

# 9. Analysing Spatial Point Process Using K-Function

K-function measures the number of events found up to a given distance of any particular event. In this section, we will learn how to compute K-function estimates by using `Kest()` of `spatstat` package. We will also learn how to perform monta carlo simulation test using `envelope()` of `spatstat` package.

## 9.1 Choa Chu Kang planning area

### 9.1.1 Computing K-fucntion estimate

```{r, fig.width = 12, fig.height = 9, dpi = 100}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

### 9.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```


```{r, fig.width = 12, fig.height = 9, dpi = 100}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

## 9.2 Tampines planning area

### 9.2.1 Computing K-fucntion estimation

```{r, fig.width = 12, fig.height = 9, dpi = 100}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

### 9.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r, fig.width = 12, fig.height = 9, dpi = 100}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```


# 10. Analysing Spatial Point Process Using L-Function

In this section, we will learn how to compute L-function estimation by using `Lest()` of `spatstat` package. We will also learn how to perform monta carlo simulation test using `envelope()` of spatstat package.

## 10.1 Choa Chu Kang planning area

### 10.1.1 Computing L Fucntion estimation

```{r, fig.width = 12, fig.height = 9, dpi = 100}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

### 10.1.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value if smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.


```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r, fig.width = 12, fig.height = 9, dpi = 100}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```


## 10.2 Tampines planning area

### 10.2.1 Computing L-fucntion estimate

```{r, fig.width=12, fig.height=9, dpi=100}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

### 10.2.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below will be used to perform the hypothesis testing.

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r, fig.width=12, fig.height=9, dpi=100}
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```
